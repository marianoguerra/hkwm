/* automatically generated by rust-bindgen */

use std::libc::*;

pub type __u_char = c_uchar;
pub type __u_short = c_ushort;
pub type __u_int = c_uint;
pub type __u_long = c_ulong;
pub type __int8_t = c_schar;
pub type __uint8_t = c_uchar;
pub type __int16_t = c_short;
pub type __uint16_t = c_ushort;
pub type __int32_t = c_int;
pub type __uint32_t = c_uint;
pub type __int64_t = c_long;
pub type __uint64_t = c_ulong;
pub type __quad_t = c_long;
pub type __u_quad_t = c_ulong;
pub type __dev_t = c_ulong;
pub type __uid_t = c_uint;
pub type __gid_t = c_uint;
pub type __ino_t = c_ulong;
pub type __ino64_t = c_ulong;
pub type __mode_t = c_uint;
pub type __nlink_t = c_ulong;
pub type __off_t = c_long;
pub type __off64_t = c_long;
pub type __pid_t = c_int;
pub struct __fsid_t {
    __val: [c_int, ..2u],
}
pub type __clock_t = c_long;
pub type __rlim_t = c_ulong;
pub type __rlim64_t = c_ulong;
pub type __id_t = c_uint;
pub type __time_t = c_long;
pub type __useconds_t = c_uint;
pub type __suseconds_t = c_long;
pub type __daddr_t = c_int;
pub type __key_t = c_int;
pub type __clockid_t = c_int;
pub type __timer_t = *mut c_void;
pub type __blksize_t = c_long;
pub type __blkcnt_t = c_long;
pub type __blkcnt64_t = c_long;
pub type __fsblkcnt_t = c_ulong;
pub type __fsblkcnt64_t = c_ulong;
pub type __fsfilcnt_t = c_ulong;
pub type __fsfilcnt64_t = c_ulong;
pub type __fsword_t = c_long;
pub type __ssize_t = c_long;
pub type __syscall_slong_t = c_long;
pub type __syscall_ulong_t = c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut c_schar;
pub type __intptr_t = c_long;
pub type __socklen_t = c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ptrdiff_t = c_long;
pub type size_t = c_ulong;
pub type wchar_t = c_int;
pub type ulong = c_ulong;
pub type ushort = c_ushort;
pub type _uint = c_uint;
pub type int8_t = c_schar;
pub type int16_t = c_short;
pub type int32_t = c_int;
pub type int64_t = c_long;
pub type u_int8_t = c_uchar;
pub type u_int16_t = c_ushort;
pub type u_int32_t = c_uint;
pub type u_int64_t = c_ulong;
pub type register_t = c_long;
pub type __sig_atomic_t = c_int;
pub struct __sigset_t {
    __val: [c_ulong, ..16u],
}
pub type sigset_t = __sigset_t;
pub struct Struct_timespec {
    tv_sec: __time_t,
    tv_nsec: __syscall_slong_t,
}
pub struct Struct_timeval {
    tv_sec: __time_t,
    tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = c_long;
pub struct fd_set {
    __fds_bits: [__fd_mask, ..16u],
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = c_ulong;
pub struct Union_pthread_attr_t {
    data: [u64, ..7u],
}
impl Union_pthread_attr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..56u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
pub struct Struct___pthread_internal_list {
    __prev: *mut Struct___pthread_internal_list,
    __next: *mut Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
pub struct Struct___pthread_mutex_s {
    __lock: c_int,
    __count: c_uint,
    __owner: c_int,
    __nusers: c_uint,
    __kind: c_int,
    __spins: c_int,
    __list: __pthread_list_t,
}
pub struct pthread_mutex_t {
    data: [u64, ..5u],
}
impl pthread_mutex_t {
    pub fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..40u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_mutexattr_t {
    data: [u32, ..1u],
}
impl pthread_mutexattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed1 {
    __lock: c_int,
    __futex: c_uint,
    __total_seq: c_ulonglong,
    __wakeup_seq: c_ulonglong,
    __woken_seq: c_ulonglong,
    __mutex: *mut c_void,
    __nwaiters: c_uint,
    __broadcast_seq: c_uint,
}
pub struct pthread_cond_t {
    data: [u64, ..6u],
}
impl pthread_cond_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed1 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..48u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_longlong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_condattr_t {
    data: [u32, ..1u],
}
impl pthread_condattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type pthread_key_t = c_uint;
pub type pthread_once_t = c_int;
pub struct Struct_Unnamed2 {
    __lock: c_int,
    __nr_readers: c_uint,
    __readers_wakeup: c_uint,
    __writer_wakeup: c_uint,
    __nr_readers_queued: c_uint,
    __nr_writers_queued: c_uint,
    __writer: c_int,
    __shared: c_int,
    __pad1: c_ulong,
    __pad2: c_ulong,
    __flags: c_uint,
}
pub struct pthread_rwlock_t {
    data: [u64, ..7u],
}
impl pthread_rwlock_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed2 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..56u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_rwlockattr_t {
    data: [u64, ..1u],
}
impl pthread_rwlockattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..8u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type pthread_spinlock_t = c_int;
pub struct pthread_barrier_t {
    data: [u64, ..4u],
}
impl pthread_barrier_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..32u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_barrierattr_t {
    data: [u32, ..1u],
}
impl pthread_barrierattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type XID = c_ulong;
pub type Mask = c_ulong;
pub type Atom = c_ulong;
pub type VisualID = c_ulong;
pub type Time = c_ulong;
pub type Window = XID;
pub type Drawable = XID;
pub type Font = XID;
pub type Pixmap = XID;
pub type Cursor = XID;
pub type Colormap = XID;
pub type GContext = XID;
pub type KeySym = XID;
pub type KeyCode = c_uchar;
pub type XPointer = *mut c_schar;
pub struct Struct__XExtData {
    number: c_int,
    next: *mut Struct__XExtData,
    free_private: extern "C" fn(arg1: *mut Struct__XExtData) -> c_int,
    private_data: XPointer,
}
pub type XExtData = Struct__XExtData;
pub struct XExtCodes {
    extension: c_int,
    major_opcode: c_int,
    first_event: c_int,
    first_error: c_int,
}
pub struct XPixmapFormatValues {
    depth: c_int,
    bits_per_pixel: c_int,
    scanline_pad: c_int,
}
pub struct XGCValues {
    function: c_int,
    plane_mask: c_ulong,
    foreground: c_ulong,
    background: c_ulong,
    line_width: c_int,
    line_style: c_int,
    cap_style: c_int,
    join_style: c_int,
    fill_style: c_int,
    fill_rule: c_int,
    arc_mode: c_int,
    tile: Pixmap,
    stipple: Pixmap,
    ts_x_origin: c_int,
    ts_y_origin: c_int,
    font: Font,
    subwindow_mode: c_int,
    graphics_exposures: c_int,
    clip_x_origin: c_int,
    clip_y_origin: c_int,
    clip_mask: Pixmap,
    dash_offset: c_int,
    dashes: c_schar,
}
pub type Struct__XGC = c_void;
pub type GC = *mut Struct__XGC;
pub struct Visual {
    ext_data: *mut XExtData,
    visualid: VisualID,
    class: c_int,
    red_mask: c_ulong,
    green_mask: c_ulong,
    blue_mask: c_ulong,
    bits_per_rgb: c_int,
    map_entries: c_int,
}
pub struct Depth {
    depth: c_int,
    nvisuals: c_int,
    visuals: *mut Visual,
}
pub type Struct__XDisplay = c_void;
pub struct Screen {
    ext_data: *mut XExtData,
    display: *mut Struct__XDisplay,
    root: Window,
    width: c_int,
    height: c_int,
    mwidth: c_int,
    mheight: c_int,
    ndepths: c_int,
    depths: *mut Depth,
    root_depth: c_int,
    root_visual: *mut Visual,
    default_gc: GC,
    cmap: Colormap,
    white_pixel: c_ulong,
    black_pixel: c_ulong,
    max_maps: c_int,
    min_maps: c_int,
    backing_store: c_int,
    save_unders: c_int,
    root_input_mask: c_long,
}
pub struct ScreenFormat {
    ext_data: *mut XExtData,
    depth: c_int,
    bits_per_pixel: c_int,
    scanline_pad: c_int,
}
pub struct XSetWindowAttributes {
    background_pixmap: Pixmap,
    background_pixel: c_ulong,
    border_pixmap: Pixmap,
    border_pixel: c_ulong,
    bit_gravity: c_int,
    win_gravity: c_int,
    backing_store: c_int,
    backing_planes: c_ulong,
    backing_pixel: c_ulong,
    save_under: c_int,
    event_mask: c_long,
    do_not_propagate_mask: c_long,
    override_redirect: c_int,
    colormap: Colormap,
    cursor: Cursor,
}
pub struct XWindowAttributes {
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
    border_width: c_int,
    depth: c_int,
    visual: *mut Visual,
    root: Window,
    class: c_int,
    bit_gravity: c_int,
    win_gravity: c_int,
    backing_store: c_int,
    backing_planes: c_ulong,
    backing_pixel: c_ulong,
    save_under: c_int,
    colormap: Colormap,
    map_installed: c_int,
    map_state: c_int,
    all_event_masks: c_long,
    your_event_mask: c_long,
    do_not_propagate_mask: c_long,
    override_redirect: c_int,
    screen: *mut Screen,
}
pub struct XHostAddress {
    family: c_int,
    length: c_int,
    address: *mut c_schar,
}
pub struct XServerInterpretedAddress {
    typelength: c_int,
    valuelength: c_int,
    _type: *mut c_schar,
    value: *mut c_schar,
}
pub struct Struct__XImage {
    width: c_int,
    height: c_int,
    xoffset: c_int,
    format: c_int,
    data: *mut c_schar,
    byte_order: c_int,
    bitmap_unit: c_int,
    bitmap_bit_order: c_int,
    bitmap_pad: c_int,
    depth: c_int,
    bytes_per_line: c_int,
    bits_per_pixel: c_int,
    red_mask: c_ulong,
    green_mask: c_ulong,
    blue_mask: c_ulong,
    obdata: XPointer,
    f: Struct_funcs,
}
pub struct Struct_funcs {
    create_image: extern "C" fn
                      (arg1: *mut Struct__XDisplay, arg2: *mut Visual,
                       arg3: c_uint, arg4: c_int, arg5: c_int,
                       arg6: *mut c_schar, arg7: c_uint, arg8: c_uint,
                       arg9: c_int, arg10: c_int) -> *mut Struct__XImage,
    destroy_image: extern "C" fn(arg1: *mut Struct__XImage) -> c_int,
    get_pixel: extern "C" fn
                   (arg1: *mut Struct__XImage, arg2: c_int, arg3: c_int)
                   -> c_ulong,
    put_pixel: extern "C" fn
                   (arg1: *mut Struct__XImage, arg2: c_int, arg3: c_int,
                    arg4: c_ulong) -> c_int,
    sub_image: extern "C" fn
                   (arg1: *mut Struct__XImage, arg2: c_int, arg3: c_int,
                    arg4: c_uint, arg5: c_uint) -> *mut Struct__XImage,
    add_pixel: extern "C" fn(arg1: *mut Struct__XImage, arg2: c_long)
                   -> c_int,
}
pub type XImage = Struct__XImage;
pub struct XWindowChanges {
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
    border_width: c_int,
    sibling: Window,
    stack_mode: c_int,
}
pub struct XColor {
    pixel: c_ulong,
    red: c_ushort,
    green: c_ushort,
    blue: c_ushort,
    flags: c_schar,
    pad: c_schar,
}
pub struct XSegment {
    x1: c_short,
    y1: c_short,
    x2: c_short,
    y2: c_short,
}
pub struct XPoint {
    x: c_short,
    y: c_short,
}
pub struct XRectangle {
    x: c_short,
    y: c_short,
    width: c_ushort,
    height: c_ushort,
}
pub struct XArc {
    x: c_short,
    y: c_short,
    width: c_ushort,
    height: c_ushort,
    angle1: c_short,
    angle2: c_short,
}
pub struct XKeyboardControl {
    key_click_percent: c_int,
    bell_percent: c_int,
    bell_pitch: c_int,
    bell_duration: c_int,
    led: c_int,
    led_mode: c_int,
    key: c_int,
    auto_repeat_mode: c_int,
}
pub struct XKeyboardState {
    key_click_percent: c_int,
    bell_percent: c_int,
    bell_pitch: c_uint,
    bell_duration: c_uint,
    led_mask: c_ulong,
    global_auto_repeat: c_int,
    auto_repeats: [c_schar, ..32u],
}
pub struct XTimeCoord {
    time: Time,
    x: c_short,
    y: c_short,
}
pub struct XModifierKeymap {
    max_keypermod: c_int,
    modifiermap: *mut KeyCode,
}
pub type Display = Struct__XDisplay;
pub type Struct__XPrivate = c_void;
pub type Struct__XrmHashBucketRec = c_void;
pub struct Struct_Unnamed3 {
    ext_data: *mut XExtData,
    private1: *mut Struct__XPrivate,
    fd: c_int,
    private2: c_int,
    proto_major_version: c_int,
    proto_minor_version: c_int,
    vendor: *mut c_schar,
    private3: XID,
    private4: XID,
    private5: XID,
    private6: c_int,
    resource_alloc: extern "C" fn(arg1: *mut Struct__XDisplay) -> XID,
    byte_order: c_int,
    bitmap_unit: c_int,
    bitmap_pad: c_int,
    bitmap_bit_order: c_int,
    nformats: c_int,
    pixmap_format: *mut ScreenFormat,
    private8: c_int,
    release: c_int,
    private9: *mut Struct__XPrivate,
    private10: *mut Struct__XPrivate,
    qlen: c_int,
    last_request_read: c_ulong,
    request: c_ulong,
    private11: XPointer,
    private12: XPointer,
    private13: XPointer,
    private14: XPointer,
    max_request_size: c_uint,
    db: *mut Struct__XrmHashBucketRec,
    private15: extern "C" fn(arg1: *mut Struct__XDisplay) -> c_int,
    display_name: *mut c_schar,
    default_screen: c_int,
    nscreens: c_int,
    screens: *mut Screen,
    motion_buffer: c_ulong,
    private16: c_ulong,
    min_keycode: c_int,
    max_keycode: c_int,
    private17: XPointer,
    private18: XPointer,
    private19: c_int,
    xdefaults: *mut c_schar,
}
pub type _XPrivDisplay = *mut Struct_Unnamed3;
pub struct XKeyEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    root: Window,
    subwindow: Window,
    time: Time,
    x: c_int,
    y: c_int,
    x_root: c_int,
    y_root: c_int,
    state: c_uint,
    keycode: c_uint,
    same_screen: c_int,
}
pub type XKeyPressedEvent = XKeyEvent;
pub type XKeyReleasedEvent = XKeyEvent;
pub struct XButtonEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    root: Window,
    subwindow: Window,
    time: Time,
    x: c_int,
    y: c_int,
    x_root: c_int,
    y_root: c_int,
    state: c_uint,
    button: c_uint,
    same_screen: c_int,
}
pub type XButtonPressedEvent = XButtonEvent;
pub type XButtonReleasedEvent = XButtonEvent;
pub struct XMotionEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    root: Window,
    subwindow: Window,
    time: Time,
    x: c_int,
    y: c_int,
    x_root: c_int,
    y_root: c_int,
    state: c_uint,
    is_hint: c_schar,
    same_screen: c_int,
}
pub type XPointerMovedEvent = XMotionEvent;
pub struct XCrossingEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    root: Window,
    subwindow: Window,
    time: Time,
    x: c_int,
    y: c_int,
    x_root: c_int,
    y_root: c_int,
    mode: c_int,
    detail: c_int,
    same_screen: c_int,
    focus: c_int,
    state: c_uint,
}
pub type XEnterWindowEvent = XCrossingEvent;
pub type XLeaveWindowEvent = XCrossingEvent;
pub struct XFocusChangeEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    mode: c_int,
    detail: c_int,
}
pub type XFocusInEvent = XFocusChangeEvent;
pub type XFocusOutEvent = XFocusChangeEvent;
pub struct XKeymapEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    key_vector: [c_schar, ..32u],
}
pub struct XExposeEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
    count: c_int,
}
pub struct XGraphicsExposeEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    drawable: Drawable,
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
    count: c_int,
    major_code: c_int,
    minor_code: c_int,
}
pub struct XNoExposeEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    drawable: Drawable,
    major_code: c_int,
    minor_code: c_int,
}
pub struct XVisibilityEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    state: c_int,
}
pub struct XCreateWindowEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    parent: Window,
    window: Window,
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
    border_width: c_int,
    override_redirect: c_int,
}
pub struct XDestroyWindowEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    event: Window,
    window: Window,
}
pub struct XUnmapEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    event: Window,
    window: Window,
    from_configure: c_int,
}
pub struct XMapEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    event: Window,
    window: Window,
    override_redirect: c_int,
}
pub struct XMapRequestEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    parent: Window,
    window: Window,
}
pub struct XReparentEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    event: Window,
    window: Window,
    parent: Window,
    x: c_int,
    y: c_int,
    override_redirect: c_int,
}
pub struct XConfigureEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    event: Window,
    window: Window,
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
    border_width: c_int,
    above: Window,
    override_redirect: c_int,
}
pub struct XGravityEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    event: Window,
    window: Window,
    x: c_int,
    y: c_int,
}
pub struct XResizeRequestEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    width: c_int,
    height: c_int,
}
pub struct XConfigureRequestEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    parent: Window,
    window: Window,
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
    border_width: c_int,
    above: Window,
    detail: c_int,
    value_mask: c_ulong,
}
pub struct XCirculateEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    event: Window,
    window: Window,
    place: c_int,
}
pub struct XCirculateRequestEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    parent: Window,
    window: Window,
    place: c_int,
}
pub struct XPropertyEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    atom: Atom,
    time: Time,
    state: c_int,
}
pub struct XSelectionClearEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    selection: Atom,
    time: Time,
}
pub struct XSelectionRequestEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    owner: Window,
    requestor: Window,
    selection: Atom,
    target: Atom,
    property: Atom,
    time: Time,
}
pub struct XSelectionEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    requestor: Window,
    selection: Atom,
    target: Atom,
    property: Atom,
    time: Time,
}
pub struct XColormapEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    colormap: Colormap,
    new: c_int,
    state: c_int,
}
pub struct Union_Unnamed4 {
    data: [u64, ..5u],
}
impl Union_Unnamed4 {
    pub fn b(&mut self) -> *mut [c_schar, ..20u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn s(&mut self) -> *mut [c_short, ..10u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn l(&mut self) -> *mut [c_long, ..5u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct XClientMessageEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    message_type: Atom,
    format: c_int,
    data: Union_Unnamed4,
}
pub struct XMappingEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
    request: c_int,
    first_keycode: c_int,
    count: c_int,
}
pub struct XErrorEvent {
    _type: c_int,
    display: *mut Display,
    resourceid: XID,
    serial: c_ulong,
    error_code: c_uchar,
    request_code: c_uchar,
    minor_code: c_uchar,
}
pub struct XAnyEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    window: Window,
}
pub struct XGenericEvent {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    extension: c_int,
    evtype: c_int,
}
pub struct XGenericEventCookie {
    _type: c_int,
    serial: c_ulong,
    send_event: c_int,
    display: *mut Display,
    extension: c_int,
    evtype: c_int,
    cookie: c_uint,
    data: *mut c_void,
}
pub struct Union__XEvent {
    data: [u64, ..24u],
}
impl Union__XEvent {
    pub fn _type(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xany(&mut self) -> *mut XAnyEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xkey(&mut self) -> *mut XKeyEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xbutton(&mut self) -> *mut XButtonEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xmotion(&mut self) -> *mut XMotionEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xcrossing(&mut self) -> *mut XCrossingEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xfocus(&mut self) -> *mut XFocusChangeEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xexpose(&mut self) -> *mut XExposeEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xgraphicsexpose(&mut self) -> *mut XGraphicsExposeEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xnoexpose(&mut self) -> *mut XNoExposeEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xvisibility(&mut self) -> *mut XVisibilityEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xcreatewindow(&mut self) -> *mut XCreateWindowEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xdestroywindow(&mut self) -> *mut XDestroyWindowEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xunmap(&mut self) -> *mut XUnmapEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xmap(&mut self) -> *mut XMapEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xmaprequest(&mut self) -> *mut XMapRequestEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xreparent(&mut self) -> *mut XReparentEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xconfigure(&mut self) -> *mut XConfigureEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xgravity(&mut self) -> *mut XGravityEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xresizerequest(&mut self) -> *mut XResizeRequestEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xconfigurerequest(&mut self) -> *mut XConfigureRequestEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xcirculate(&mut self) -> *mut XCirculateEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xcirculaterequest(&mut self) -> *mut XCirculateRequestEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xproperty(&mut self) -> *mut XPropertyEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xselectionclear(&mut self) -> *mut XSelectionClearEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xselectionrequest(&mut self) -> *mut XSelectionRequestEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xselection(&mut self) -> *mut XSelectionEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xcolormap(&mut self) -> *mut XColormapEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xclient(&mut self) -> *mut XClientMessageEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xmapping(&mut self) -> *mut XMappingEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xerror(&mut self) -> *mut XErrorEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xkeymap(&mut self) -> *mut XKeymapEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xgeneric(&mut self) -> *mut XGenericEvent {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn xcookie(&mut self) -> *mut XGenericEventCookie {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn pad(&mut self) -> *mut [c_long, ..24u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type XEvent = Union__XEvent;
pub struct XCharStruct {
    lbearing: c_short,
    rbearing: c_short,
    width: c_short,
    ascent: c_short,
    descent: c_short,
    attributes: c_ushort,
}
pub struct XFontProp {
    name: Atom,
    card32: c_ulong,
}
pub struct XFontStruct {
    ext_data: *mut XExtData,
    fid: Font,
    direction: c_uint,
    min_char_or_byte2: c_uint,
    max_char_or_byte2: c_uint,
    min_byte1: c_uint,
    max_byte1: c_uint,
    all_chars_exist: c_int,
    default_char: c_uint,
    n_properties: c_int,
    properties: *mut XFontProp,
    min_bounds: XCharStruct,
    max_bounds: XCharStruct,
    per_char: *mut XCharStruct,
    ascent: c_int,
    descent: c_int,
}
pub struct XTextItem {
    chars: *mut c_schar,
    nchars: c_int,
    delta: c_int,
    font: Font,
}
pub struct XChar2b {
    byte1: c_uchar,
    byte2: c_uchar,
}
pub struct XTextItem16 {
    chars: *mut XChar2b,
    nchars: c_int,
    delta: c_int,
    font: Font,
}
pub struct XEDataObject {
    data: [u64, ..1u],
}
impl XEDataObject {
    pub fn display(&mut self) -> *mut *mut Display {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn gc(&mut self) -> *mut GC {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn visual(&mut self) -> *mut *mut Visual {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn screen(&mut self) -> *mut *mut Screen {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn pixmap_format(&mut self) -> *mut *mut ScreenFormat {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn font(&mut self) -> *mut *mut XFontStruct {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct XFontSetExtents {
    max_ink_extent: XRectangle,
    max_logical_extent: XRectangle,
}
pub type Struct__XOM = c_void;
pub type XOM = *mut Struct__XOM;
pub type Struct__XOC = c_void;
pub type XOC = *mut Struct__XOC;
pub type XFontSet = *mut Struct__XOC;
pub struct XmbTextItem {
    chars: *mut c_schar,
    nchars: c_int,
    delta: c_int,
    font_set: XFontSet,
}
pub struct XwcTextItem {
    chars: *mut wchar_t,
    nchars: c_int,
    delta: c_int,
    font_set: XFontSet,
}
pub struct XOMCharSetList {
    charset_count: c_int,
    charset_list: *mut *mut c_schar,
}
pub type XOrientation = c_uint;
pub static XOMOrientation_LTR_TTB: c_uint = 0;
pub static XOMOrientation_RTL_TTB: c_uint = 1;
pub static XOMOrientation_TTB_LTR: c_uint = 2;
pub static XOMOrientation_TTB_RTL: c_uint = 3;
pub static XOMOrientation_Context: c_uint = 4;
pub struct XOMOrientation {
    num_orientation: c_int,
    orientation: *mut XOrientation,
}
pub struct XOMFontInfo {
    num_font: c_int,
    font_struct_list: *mut *mut XFontStruct,
    font_name_list: *mut *mut c_schar,
}
pub type Struct__XIM = c_void;
pub type XIM = *mut Struct__XIM;
pub type Struct__XIC = c_void;
pub type XIC = *mut Struct__XIC;
pub type XIMProc = extern "C" fn(arg1: XIM, arg2: XPointer, arg3: XPointer);
pub type XICProc =
    extern "C" fn(arg1: XIC, arg2: XPointer, arg3: XPointer) -> c_int;
pub type XIDProc =
    extern "C" fn(arg1: *mut Display, arg2: XPointer, arg3: XPointer);
pub type XIMStyle = c_ulong;
pub struct XIMStyles {
    count_styles: c_ushort,
    supported_styles: *mut XIMStyle,
}
pub type XVaNestedList = *mut c_void;
pub struct XIMCallback {
    client_data: XPointer,
    callback: XIMProc,
}
pub struct XICCallback {
    client_data: XPointer,
    callback: XICProc,
}
pub type XIMFeedback = c_ulong;
pub struct Struct__XIMText {
    length: c_ushort,
    feedback: *mut XIMFeedback,
    encoding_is_wchar: c_int,
    string: Union_Unnamed5,
}
pub struct Union_Unnamed5 {
    data: [u64, ..1u],
}
impl Union_Unnamed5 {
    pub fn multi_byte(&mut self) -> *mut *mut c_schar {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn wide_char(&mut self) -> *mut *mut wchar_t {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type XIMText = Struct__XIMText;
pub type XIMPreeditState = c_ulong;
pub struct Struct__XIMPreeditStateNotifyCallbackStruct {
    state: XIMPreeditState,
}
pub type XIMPreeditStateNotifyCallbackStruct =
    Struct__XIMPreeditStateNotifyCallbackStruct;
pub type XIMResetState = c_ulong;
pub type XIMStringConversionFeedback = c_ulong;
pub struct Struct__XIMStringConversionText {
    length: c_ushort,
    feedback: *mut XIMStringConversionFeedback,
    encoding_is_wchar: c_int,
    string: Union_Unnamed6,
}
pub struct Union_Unnamed6 {
    data: [u64, ..1u],
}
impl Union_Unnamed6 {
    pub fn mbs(&mut self) -> *mut *mut c_schar {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn wcs(&mut self) -> *mut *mut wchar_t {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type XIMStringConversionText = Struct__XIMStringConversionText;
pub type XIMStringConversionPosition = c_ushort;
pub type XIMStringConversionType = c_ushort;
pub type XIMStringConversionOperation = c_ushort;
pub type XIMCaretDirection = c_uint;
pub static XIMForwardChar: c_uint = 0;
pub static XIMBackwardChar: c_uint = 1;
pub static XIMForwardWord: c_uint = 2;
pub static XIMBackwardWord: c_uint = 3;
pub static XIMCaretUp: c_uint = 4;
pub static XIMCaretDown: c_uint = 5;
pub static XIMNextLine: c_uint = 6;
pub static XIMPreviousLine: c_uint = 7;
pub static XIMLineStart: c_uint = 8;
pub static XIMLineEnd: c_uint = 9;
pub static XIMAbsolutePosition: c_uint = 10;
pub static XIMDontChange: c_uint = 11;
pub struct Struct__XIMStringConversionCallbackStruct {
    position: XIMStringConversionPosition,
    direction: XIMCaretDirection,
    operation: XIMStringConversionOperation,
    factor: c_ushort,
    text: *mut XIMStringConversionText,
}
pub type XIMStringConversionCallbackStruct =
    Struct__XIMStringConversionCallbackStruct;
pub struct Struct__XIMPreeditDrawCallbackStruct {
    caret: c_int,
    chg_first: c_int,
    chg_length: c_int,
    text: *mut XIMText,
}
pub type XIMPreeditDrawCallbackStruct = Struct__XIMPreeditDrawCallbackStruct;
pub type XIMCaretStyle = c_uint;
pub static XIMIsInvisible: c_uint = 0;
pub static XIMIsPrimary: c_uint = 1;
pub static XIMIsSecondary: c_uint = 2;
pub struct Struct__XIMPreeditCaretCallbackStruct {
    position: c_int,
    direction: XIMCaretDirection,
    style: XIMCaretStyle,
}
pub type XIMPreeditCaretCallbackStruct =
    Struct__XIMPreeditCaretCallbackStruct;
pub type XIMStatusDataType = c_uint;
pub static XIMTextType: c_uint = 0;
pub static XIMBitmapType: c_uint = 1;
pub struct Struct__XIMStatusDrawCallbackStruct {
    _type: XIMStatusDataType,
    data: Union_Unnamed7,
}
pub struct Union_Unnamed7 {
    data: [u64, ..1u],
}
impl Union_Unnamed7 {
    pub fn text(&mut self) -> *mut *mut XIMText {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn bitmap(&mut self) -> *mut Pixmap {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type XIMStatusDrawCallbackStruct = Struct__XIMStatusDrawCallbackStruct;
pub struct Struct__XIMHotKeyTrigger {
    keysym: KeySym,
    modifier: c_int,
    modifier_mask: c_int,
}
pub type XIMHotKeyTrigger = Struct__XIMHotKeyTrigger;
pub struct Struct__XIMHotKeyTriggers {
    num_hot_key: c_int,
    key: *mut XIMHotKeyTrigger,
}
pub type XIMHotKeyTriggers = Struct__XIMHotKeyTriggers;
pub type XIMHotKeyState = c_ulong;
pub struct XIMValuesList {
    count_values: c_ushort,
    supported_values: *mut *mut c_schar,
}
pub type XErrorHandler =
    extern "C" fn(arg1: *mut Display, arg2: *mut XErrorEvent) -> c_int;
pub type XIOErrorHandler = extern "C" fn(arg1: *mut Display) -> c_int;
pub type XConnectionWatchProc =
    extern "C" fn
        (arg1: *mut Display, arg2: XPointer, arg3: c_int, arg4: c_int,
         arg5: *mut XPointer);
#[link(name = "X11")]
extern "C" {
    pub static mut _Xdebug: c_int;
    pub fn select(__nfds: c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> c_int;
    pub fn pselect(__nfds: c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *Struct_timespec, __sigmask: *__sigset_t) ->
     c_int;
    pub fn gnu_dev_major(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_minor(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_makedev(__major: c_uint, __minor: c_uint) -> c_ulonglong;
    pub fn _Xmblen(str: *mut c_schar, len: c_int) -> c_int;
    pub fn XLoadQueryFont(arg1: *mut Display, arg2: *c_schar) ->
     *mut XFontStruct;
    pub fn XQueryFont(arg1: *mut Display, arg2: XID) -> *mut XFontStruct;
    pub fn XGetMotionEvents(arg1: *mut Display, arg2: Window, arg3: Time,
                            arg4: Time, arg5: *mut c_int) -> *mut XTimeCoord;
    pub fn XDeleteModifiermapEntry(arg1: *mut XModifierKeymap, arg2: KeyCode,
                                   arg3: c_int) -> *mut XModifierKeymap;
    pub fn XGetModifierMapping(arg1: *mut Display) -> *mut XModifierKeymap;
    pub fn XInsertModifiermapEntry(arg1: *mut XModifierKeymap, arg2: KeyCode,
                                   arg3: c_int) -> *mut XModifierKeymap;
    pub fn XNewModifiermap(arg1: c_int) -> *mut XModifierKeymap;
    pub fn XCreateImage(arg1: *mut Display, arg2: *mut Visual, arg3: c_uint,
                        arg4: c_int, arg5: c_int, arg6: *mut c_schar,
                        arg7: c_uint, arg8: c_uint, arg9: c_int, arg10: c_int)
     -> *mut XImage;
    pub fn XInitImage(arg1: *mut XImage) -> c_int;
    pub fn XGetImage(arg1: *mut Display, arg2: Drawable, arg3: c_int,
                     arg4: c_int, arg5: c_uint, arg6: c_uint, arg7: c_ulong,
                     arg8: c_int) -> *mut XImage;
    pub fn XGetSubImage(arg1: *mut Display, arg2: Drawable, arg3: c_int,
                        arg4: c_int, arg5: c_uint, arg6: c_uint,
                        arg7: c_ulong, arg8: c_int, arg9: *mut XImage,
                        arg10: c_int, arg11: c_int) -> *mut XImage;
    pub fn XOpenDisplay(arg1: *c_schar) -> *mut Display;
    pub fn XrmInitialize();
    pub fn XFetchBytes(arg1: *mut Display, arg2: *mut c_int) -> *mut c_schar;
    pub fn XFetchBuffer(arg1: *mut Display, arg2: *mut c_int, arg3: c_int) ->
     *mut c_schar;
    pub fn XGetAtomName(arg1: *mut Display, arg2: Atom) -> *mut c_schar;
    pub fn XGetAtomNames(arg1: *mut Display, arg2: *mut Atom, arg3: c_int,
                         arg4: *mut *mut c_schar) -> c_int;
    pub fn XGetDefault(arg1: *mut Display, arg2: *c_schar, arg3: *c_schar) ->
     *mut c_schar;
    pub fn XDisplayName(arg1: *c_schar) -> *mut c_schar;
    pub fn XKeysymToString(arg1: KeySym) -> *mut c_schar;
    pub fn XSynchronize(arg1: *mut Display, arg2: c_int) ->
     extern "C" fn(arg1: *mut Display) -> c_int;
    pub fn XSetAfterFunction(arg1: *mut Display,
                             arg2: extern "C" fn(arg1: *mut Display) -> c_int)
     -> extern "C" fn(arg1: *mut Display) -> c_int;
    pub fn XInternAtom(arg1: *mut Display, arg2: *c_schar, arg3: c_int) ->
     Atom;
    pub fn XInternAtoms(arg1: *mut Display, arg2: *mut *mut c_schar,
                        arg3: c_int, arg4: c_int, arg5: *mut Atom) -> c_int;
    pub fn XCopyColormapAndFree(arg1: *mut Display, arg2: Colormap) ->
     Colormap;
    pub fn XCreateColormap(arg1: *mut Display, arg2: Window,
                           arg3: *mut Visual, arg4: c_int) -> Colormap;
    pub fn XCreatePixmapCursor(arg1: *mut Display, arg2: Pixmap, arg3: Pixmap,
                               arg4: *mut XColor, arg5: *mut XColor,
                               arg6: c_uint, arg7: c_uint) -> Cursor;
    pub fn XCreateGlyphCursor(arg1: *mut Display, arg2: Font, arg3: Font,
                              arg4: c_uint, arg5: c_uint, arg6: *XColor,
                              arg7: *XColor) -> Cursor;
    pub fn XCreateFontCursor(arg1: *mut Display, arg2: c_uint) -> Cursor;
    pub fn XLoadFont(arg1: *mut Display, arg2: *c_schar) -> Font;
    pub fn XCreateGC(arg1: *mut Display, arg2: Drawable, arg3: c_ulong,
                     arg4: *mut XGCValues) -> GC;
    pub fn XGContextFromGC(arg1: GC) -> GContext;
    pub fn XFlushGC(arg1: *mut Display, arg2: GC);
    pub fn XCreatePixmap(arg1: *mut Display, arg2: Drawable, arg3: c_uint,
                         arg4: c_uint, arg5: c_uint) -> Pixmap;
    pub fn XCreateBitmapFromData(arg1: *mut Display, arg2: Drawable,
                                 arg3: *c_schar, arg4: c_uint, arg5: c_uint)
     -> Pixmap;
    pub fn XCreatePixmapFromBitmapData(arg1: *mut Display, arg2: Drawable,
                                       arg3: *mut c_schar, arg4: c_uint,
                                       arg5: c_uint, arg6: c_ulong,
                                       arg7: c_ulong, arg8: c_uint) -> Pixmap;
    pub fn XCreateSimpleWindow(arg1: *mut Display, arg2: Window, arg3: c_int,
                               arg4: c_int, arg5: c_uint, arg6: c_uint,
                               arg7: c_uint, arg8: c_ulong, arg9: c_ulong) ->
     Window;
    pub fn XGetSelectionOwner(arg1: *mut Display, arg2: Atom) -> Window;
    pub fn XCreateWindow(arg1: *mut Display, arg2: Window, arg3: c_int,
                         arg4: c_int, arg5: c_uint, arg6: c_uint,
                         arg7: c_uint, arg8: c_int, arg9: c_uint,
                         arg10: *mut Visual, arg11: c_ulong,
                         arg12: *mut XSetWindowAttributes) -> Window;
    pub fn XListInstalledColormaps(arg1: *mut Display, arg2: Window,
                                   arg3: *mut c_int) -> *mut Colormap;
    pub fn XListFonts(arg1: *mut Display, arg2: *c_schar, arg3: c_int,
                      arg4: *mut c_int) -> *mut *mut c_schar;
    pub fn XListFontsWithInfo(arg1: *mut Display, arg2: *c_schar, arg3: c_int,
                              arg4: *mut c_int, arg5: *mut *mut XFontStruct)
     -> *mut *mut c_schar;
    pub fn XGetFontPath(arg1: *mut Display, arg2: *mut c_int) ->
     *mut *mut c_schar;
    pub fn XListExtensions(arg1: *mut Display, arg2: *mut c_int) ->
     *mut *mut c_schar;
    pub fn XListProperties(arg1: *mut Display, arg2: Window, arg3: *mut c_int)
     -> *mut Atom;
    pub fn XListHosts(arg1: *mut Display, arg2: *mut c_int, arg3: *mut c_int)
     -> *mut XHostAddress;
    pub fn XKeycodeToKeysym(arg1: *mut Display, arg2: KeyCode, arg3: c_int) ->
     KeySym;
    pub fn XLookupKeysym(arg1: *mut XKeyEvent, arg2: c_int) -> KeySym;
    pub fn XGetKeyboardMapping(arg1: *mut Display, arg2: KeyCode, arg3: c_int,
                               arg4: *mut c_int) -> *mut KeySym;
    pub fn XStringToKeysym(arg1: *c_schar) -> KeySym;
    pub fn XMaxRequestSize(arg1: *mut Display) -> c_long;
    pub fn XExtendedMaxRequestSize(arg1: *mut Display) -> c_long;
    pub fn XResourceManagerString(arg1: *mut Display) -> *mut c_schar;
    pub fn XScreenResourceString(arg1: *mut Screen) -> *mut c_schar;
    pub fn XDisplayMotionBufferSize(arg1: *mut Display) -> c_ulong;
    pub fn XVisualIDFromVisual(arg1: *mut Visual) -> VisualID;
    pub fn XInitThreads() -> c_int;
    pub fn XLockDisplay(arg1: *mut Display);
    pub fn XUnlockDisplay(arg1: *mut Display);
    pub fn XInitExtension(arg1: *mut Display, arg2: *c_schar) ->
     *mut XExtCodes;
    pub fn XAddExtension(arg1: *mut Display) -> *mut XExtCodes;
    pub fn XFindOnExtensionList(arg1: *mut *mut XExtData, arg2: c_int) ->
     *mut XExtData;
    pub fn XEHeadOfExtensionList(arg1: XEDataObject) -> *mut *mut XExtData;
    pub fn XRootWindow(arg1: *mut Display, arg2: c_int) -> Window;
    pub fn XDefaultRootWindow(arg1: *mut Display) -> Window;
    pub fn XRootWindowOfScreen(arg1: *mut Screen) -> Window;
    pub fn XDefaultVisual(arg1: *mut Display, arg2: c_int) -> *mut Visual;
    pub fn XDefaultVisualOfScreen(arg1: *mut Screen) -> *mut Visual;
    pub fn XDefaultGC(arg1: *mut Display, arg2: c_int) -> GC;
    pub fn XDefaultGCOfScreen(arg1: *mut Screen) -> GC;
    pub fn XBlackPixel(arg1: *mut Display, arg2: c_int) -> c_ulong;
    pub fn XWhitePixel(arg1: *mut Display, arg2: c_int) -> c_ulong;
    pub fn XAllPlanes() -> c_ulong;
    pub fn XBlackPixelOfScreen(arg1: *mut Screen) -> c_ulong;
    pub fn XWhitePixelOfScreen(arg1: *mut Screen) -> c_ulong;
    pub fn XNextRequest(arg1: *mut Display) -> c_ulong;
    pub fn XLastKnownRequestProcessed(arg1: *mut Display) -> c_ulong;
    pub fn XServerVendor(arg1: *mut Display) -> *mut c_schar;
    pub fn XDisplayString(arg1: *mut Display) -> *mut c_schar;
    pub fn XDefaultColormap(arg1: *mut Display, arg2: c_int) -> Colormap;
    pub fn XDefaultColormapOfScreen(arg1: *mut Screen) -> Colormap;
    pub fn XDisplayOfScreen(arg1: *mut Screen) -> *mut Display;
    pub fn XScreenOfDisplay(arg1: *mut Display, arg2: c_int) -> *mut Screen;
    pub fn XDefaultScreenOfDisplay(arg1: *mut Display) -> *mut Screen;
    pub fn XEventMaskOfScreen(arg1: *mut Screen) -> c_long;
    pub fn XScreenNumberOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XSetErrorHandler(arg1: XErrorHandler) -> XErrorHandler;
    pub fn XSetIOErrorHandler(arg1: XIOErrorHandler) -> XIOErrorHandler;
    pub fn XListPixmapFormats(arg1: *mut Display, arg2: *mut c_int) ->
     *mut XPixmapFormatValues;
    pub fn XListDepths(arg1: *mut Display, arg2: c_int, arg3: *mut c_int) ->
     *mut c_int;
    pub fn XReconfigureWMWindow(arg1: *mut Display, arg2: Window, arg3: c_int,
                                arg4: c_uint, arg5: *mut XWindowChanges) ->
     c_int;
    pub fn XGetWMProtocols(arg1: *mut Display, arg2: Window,
                           arg3: *mut *mut Atom, arg4: *mut c_int) -> c_int;
    pub fn XSetWMProtocols(arg1: *mut Display, arg2: Window, arg3: *mut Atom,
                           arg4: c_int) -> c_int;
    pub fn XIconifyWindow(arg1: *mut Display, arg2: Window, arg3: c_int) ->
     c_int;
    pub fn XWithdrawWindow(arg1: *mut Display, arg2: Window, arg3: c_int) ->
     c_int;
    pub fn XGetCommand(arg1: *mut Display, arg2: Window,
                       arg3: *mut *mut *mut c_schar, arg4: *mut c_int) ->
     c_int;
    pub fn XGetWMColormapWindows(arg1: *mut Display, arg2: Window,
                                 arg3: *mut *mut Window, arg4: *mut c_int) ->
     c_int;
    pub fn XSetWMColormapWindows(arg1: *mut Display, arg2: Window,
                                 arg3: *mut Window, arg4: c_int) -> c_int;
    pub fn XFreeStringList(arg1: *mut *mut c_schar);
    pub fn XSetTransientForHint(arg1: *mut Display, arg2: Window,
                                arg3: Window) -> c_int;
    pub fn XActivateScreenSaver(arg1: *mut Display) -> c_int;
    pub fn XAddHost(arg1: *mut Display, arg2: *mut XHostAddress) -> c_int;
    pub fn XAddHosts(arg1: *mut Display, arg2: *mut XHostAddress, arg3: c_int)
     -> c_int;
    pub fn XAddToExtensionList(arg1: *mut *mut Struct__XExtData,
                               arg2: *mut XExtData) -> c_int;
    pub fn XAddToSaveSet(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XAllocColor(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor)
     -> c_int;
    pub fn XAllocColorCells(arg1: *mut Display, arg2: Colormap, arg3: c_int,
                            arg4: *mut c_ulong, arg5: c_uint,
                            arg6: *mut c_ulong, arg7: c_uint) -> c_int;
    pub fn XAllocColorPlanes(arg1: *mut Display, arg2: Colormap, arg3: c_int,
                             arg4: *mut c_ulong, arg5: c_int, arg6: c_int,
                             arg7: c_int, arg8: c_int, arg9: *mut c_ulong,
                             arg10: *mut c_ulong, arg11: *mut c_ulong) ->
     c_int;
    pub fn XAllocNamedColor(arg1: *mut Display, arg2: Colormap,
                            arg3: *c_schar, arg4: *mut XColor,
                            arg5: *mut XColor) -> c_int;
    pub fn XAllowEvents(arg1: *mut Display, arg2: c_int, arg3: Time) -> c_int;
    pub fn XAutoRepeatOff(arg1: *mut Display) -> c_int;
    pub fn XAutoRepeatOn(arg1: *mut Display) -> c_int;
    pub fn XBell(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XBitmapBitOrder(arg1: *mut Display) -> c_int;
    pub fn XBitmapPad(arg1: *mut Display) -> c_int;
    pub fn XBitmapUnit(arg1: *mut Display) -> c_int;
    pub fn XCellsOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XChangeActivePointerGrab(arg1: *mut Display, arg2: c_uint,
                                    arg3: Cursor, arg4: Time) -> c_int;
    pub fn XChangeGC(arg1: *mut Display, arg2: GC, arg3: c_ulong,
                     arg4: *mut XGCValues) -> c_int;
    pub fn XChangeKeyboardControl(arg1: *mut Display, arg2: c_ulong,
                                  arg3: *mut XKeyboardControl) -> c_int;
    pub fn XChangeKeyboardMapping(arg1: *mut Display, arg2: c_int,
                                  arg3: c_int, arg4: *mut KeySym, arg5: c_int)
     -> c_int;
    pub fn XChangePointerControl(arg1: *mut Display, arg2: c_int, arg3: c_int,
                                 arg4: c_int, arg5: c_int, arg6: c_int) ->
     c_int;
    pub fn XChangeProperty(arg1: *mut Display, arg2: Window, arg3: Atom,
                           arg4: Atom, arg5: c_int, arg6: c_int,
                           arg7: *c_uchar, arg8: c_int) -> c_int;
    pub fn XChangeSaveSet(arg1: *mut Display, arg2: Window, arg3: c_int) ->
     c_int;
    pub fn XChangeWindowAttributes(arg1: *mut Display, arg2: Window,
                                   arg3: c_ulong,
                                   arg4: *mut XSetWindowAttributes) -> c_int;
    pub fn XCheckIfEvent(arg1: *mut Display, arg2: *mut XEvent,
                         arg3:
                             extern "C" fn
                                 (arg1: *mut Display, arg2: *mut XEvent,
                                  arg3: XPointer) -> c_int, arg4: XPointer) ->
     c_int;
    pub fn XCheckMaskEvent(arg1: *mut Display, arg2: c_long,
                           arg3: *mut XEvent) -> c_int;
    pub fn XCheckTypedEvent(arg1: *mut Display, arg2: c_int,
                            arg3: *mut XEvent) -> c_int;
    pub fn XCheckTypedWindowEvent(arg1: *mut Display, arg2: Window,
                                  arg3: c_int, arg4: *mut XEvent) -> c_int;
    pub fn XCheckWindowEvent(arg1: *mut Display, arg2: Window, arg3: c_long,
                             arg4: *mut XEvent) -> c_int;
    pub fn XCirculateSubwindows(arg1: *mut Display, arg2: Window, arg3: c_int)
     -> c_int;
    pub fn XCirculateSubwindowsDown(arg1: *mut Display, arg2: Window) ->
     c_int;
    pub fn XCirculateSubwindowsUp(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XClearArea(arg1: *mut Display, arg2: Window, arg3: c_int,
                      arg4: c_int, arg5: c_uint, arg6: c_uint, arg7: c_int) ->
     c_int;
    pub fn XClearWindow(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XCloseDisplay(arg1: *mut Display) -> c_int;
    pub fn XConfigureWindow(arg1: *mut Display, arg2: Window, arg3: c_uint,
                            arg4: *mut XWindowChanges) -> c_int;
    pub fn XConnectionNumber(arg1: *mut Display) -> c_int;
    pub fn XConvertSelection(arg1: *mut Display, arg2: Atom, arg3: Atom,
                             arg4: Atom, arg5: Window, arg6: Time) -> c_int;
    pub fn XCopyArea(arg1: *mut Display, arg2: Drawable, arg3: Drawable,
                     arg4: GC, arg5: c_int, arg6: c_int, arg7: c_uint,
                     arg8: c_uint, arg9: c_int, arg10: c_int) -> c_int;
    pub fn XCopyGC(arg1: *mut Display, arg2: GC, arg3: c_ulong, arg4: GC) ->
     c_int;
    pub fn XCopyPlane(arg1: *mut Display, arg2: Drawable, arg3: Drawable,
                      arg4: GC, arg5: c_int, arg6: c_int, arg7: c_uint,
                      arg8: c_uint, arg9: c_int, arg10: c_int, arg11: c_ulong)
     -> c_int;
    pub fn XDefaultDepth(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XDefaultDepthOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XDefaultScreen(arg1: *mut Display) -> c_int;
    pub fn XDefineCursor(arg1: *mut Display, arg2: Window, arg3: Cursor) ->
     c_int;
    pub fn XDeleteProperty(arg1: *mut Display, arg2: Window, arg3: Atom) ->
     c_int;
    pub fn XDestroyWindow(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XDestroySubwindows(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XDoesBackingStore(arg1: *mut Screen) -> c_int;
    pub fn XDoesSaveUnders(arg1: *mut Screen) -> c_int;
    pub fn XDisableAccessControl(arg1: *mut Display) -> c_int;
    pub fn XDisplayCells(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XDisplayHeight(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XDisplayHeightMM(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XDisplayKeycodes(arg1: *mut Display, arg2: *mut c_int,
                            arg3: *mut c_int) -> c_int;
    pub fn XDisplayPlanes(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XDisplayWidth(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XDisplayWidthMM(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XDrawArc(arg1: *mut Display, arg2: Drawable, arg3: GC, arg4: c_int,
                    arg5: c_int, arg6: c_uint, arg7: c_uint, arg8: c_int,
                    arg9: c_int) -> c_int;
    pub fn XDrawArcs(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: *mut XArc, arg5: c_int) -> c_int;
    pub fn XDrawImageString(arg1: *mut Display, arg2: Drawable, arg3: GC,
                            arg4: c_int, arg5: c_int, arg6: *c_schar,
                            arg7: c_int) -> c_int;
    pub fn XDrawImageString16(arg1: *mut Display, arg2: Drawable, arg3: GC,
                              arg4: c_int, arg5: c_int, arg6: *XChar2b,
                              arg7: c_int) -> c_int;
    pub fn XDrawLine(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: c_int, arg5: c_int, arg6: c_int, arg7: c_int) ->
     c_int;
    pub fn XDrawLines(arg1: *mut Display, arg2: Drawable, arg3: GC,
                      arg4: *mut XPoint, arg5: c_int, arg6: c_int) -> c_int;
    pub fn XDrawPoint(arg1: *mut Display, arg2: Drawable, arg3: GC,
                      arg4: c_int, arg5: c_int) -> c_int;
    pub fn XDrawPoints(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: *mut XPoint, arg5: c_int, arg6: c_int) -> c_int;
    pub fn XDrawRectangle(arg1: *mut Display, arg2: Drawable, arg3: GC,
                          arg4: c_int, arg5: c_int, arg6: c_uint,
                          arg7: c_uint) -> c_int;
    pub fn XDrawRectangles(arg1: *mut Display, arg2: Drawable, arg3: GC,
                           arg4: *mut XRectangle, arg5: c_int) -> c_int;
    pub fn XDrawSegments(arg1: *mut Display, arg2: Drawable, arg3: GC,
                         arg4: *mut XSegment, arg5: c_int) -> c_int;
    pub fn XDrawString(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: c_int, arg5: c_int, arg6: *c_schar, arg7: c_int)
     -> c_int;
    pub fn XDrawString16(arg1: *mut Display, arg2: Drawable, arg3: GC,
                         arg4: c_int, arg5: c_int, arg6: *XChar2b,
                         arg7: c_int) -> c_int;
    pub fn XDrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: c_int, arg5: c_int, arg6: *mut XTextItem,
                     arg7: c_int) -> c_int;
    pub fn XDrawText16(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: c_int, arg5: c_int, arg6: *mut XTextItem16,
                       arg7: c_int) -> c_int;
    pub fn XEnableAccessControl(arg1: *mut Display) -> c_int;
    pub fn XEventsQueued(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XFetchName(arg1: *mut Display, arg2: Window,
                      arg3: *mut *mut c_schar) -> c_int;
    pub fn XFillArc(arg1: *mut Display, arg2: Drawable, arg3: GC, arg4: c_int,
                    arg5: c_int, arg6: c_uint, arg7: c_uint, arg8: c_int,
                    arg9: c_int) -> c_int;
    pub fn XFillArcs(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: *mut XArc, arg5: c_int) -> c_int;
    pub fn XFillPolygon(arg1: *mut Display, arg2: Drawable, arg3: GC,
                        arg4: *mut XPoint, arg5: c_int, arg6: c_int,
                        arg7: c_int) -> c_int;
    pub fn XFillRectangle(arg1: *mut Display, arg2: Drawable, arg3: GC,
                          arg4: c_int, arg5: c_int, arg6: c_uint,
                          arg7: c_uint) -> c_int;
    pub fn XFillRectangles(arg1: *mut Display, arg2: Drawable, arg3: GC,
                           arg4: *mut XRectangle, arg5: c_int) -> c_int;
    pub fn XFlush(arg1: *mut Display) -> c_int;
    pub fn XForceScreenSaver(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XFree(arg1: *mut c_void) -> c_int;
    pub fn XFreeColormap(arg1: *mut Display, arg2: Colormap) -> c_int;
    pub fn XFreeColors(arg1: *mut Display, arg2: Colormap, arg3: *mut c_ulong,
                       arg4: c_int, arg5: c_ulong) -> c_int;
    pub fn XFreeCursor(arg1: *mut Display, arg2: Cursor) -> c_int;
    pub fn XFreeExtensionList(arg1: *mut *mut c_schar) -> c_int;
    pub fn XFreeFont(arg1: *mut Display, arg2: *mut XFontStruct) -> c_int;
    pub fn XFreeFontInfo(arg1: *mut *mut c_schar, arg2: *mut XFontStruct,
                         arg3: c_int) -> c_int;
    pub fn XFreeFontNames(arg1: *mut *mut c_schar) -> c_int;
    pub fn XFreeFontPath(arg1: *mut *mut c_schar) -> c_int;
    pub fn XFreeGC(arg1: *mut Display, arg2: GC) -> c_int;
    pub fn XFreeModifiermap(arg1: *mut XModifierKeymap) -> c_int;
    pub fn XFreePixmap(arg1: *mut Display, arg2: Pixmap) -> c_int;
    pub fn XGeometry(arg1: *mut Display, arg2: c_int, arg3: *c_schar,
                     arg4: *c_schar, arg5: c_uint, arg6: c_uint, arg7: c_uint,
                     arg8: c_int, arg9: c_int, arg10: *mut c_int,
                     arg11: *mut c_int, arg12: *mut c_int, arg13: *mut c_int)
     -> c_int;
    pub fn XGetErrorDatabaseText(arg1: *mut Display, arg2: *c_schar,
                                 arg3: *c_schar, arg4: *c_schar,
                                 arg5: *mut c_schar, arg6: c_int) -> c_int;
    pub fn XGetErrorText(arg1: *mut Display, arg2: c_int, arg3: *mut c_schar,
                         arg4: c_int) -> c_int;
    pub fn XGetFontProperty(arg1: *mut XFontStruct, arg2: Atom,
                            arg3: *mut c_ulong) -> c_int;
    pub fn XGetGCValues(arg1: *mut Display, arg2: GC, arg3: c_ulong,
                        arg4: *mut XGCValues) -> c_int;
    pub fn XGetGeometry(arg1: *mut Display, arg2: Drawable, arg3: *mut Window,
                        arg4: *mut c_int, arg5: *mut c_int, arg6: *mut c_uint,
                        arg7: *mut c_uint, arg8: *mut c_uint,
                        arg9: *mut c_uint) -> c_int;
    pub fn XGetIconName(arg1: *mut Display, arg2: Window,
                        arg3: *mut *mut c_schar) -> c_int;
    pub fn XGetInputFocus(arg1: *mut Display, arg2: *mut Window,
                          arg3: *mut c_int) -> c_int;
    pub fn XGetKeyboardControl(arg1: *mut Display, arg2: *mut XKeyboardState)
     -> c_int;
    pub fn XGetPointerControl(arg1: *mut Display, arg2: *mut c_int,
                              arg3: *mut c_int, arg4: *mut c_int) -> c_int;
    pub fn XGetPointerMapping(arg1: *mut Display, arg2: *mut c_uchar,
                              arg3: c_int) -> c_int;
    pub fn XGetScreenSaver(arg1: *mut Display, arg2: *mut c_int,
                           arg3: *mut c_int, arg4: *mut c_int,
                           arg5: *mut c_int) -> c_int;
    pub fn XGetTransientForHint(arg1: *mut Display, arg2: Window,
                                arg3: *mut Window) -> c_int;
    pub fn XGetWindowProperty(arg1: *mut Display, arg2: Window, arg3: Atom,
                              arg4: c_long, arg5: c_long, arg6: c_int,
                              arg7: Atom, arg8: *mut Atom, arg9: *mut c_int,
                              arg10: *mut c_ulong, arg11: *mut c_ulong,
                              arg12: *mut *mut c_uchar) -> c_int;
    pub fn XGetWindowAttributes(arg1: *mut Display, arg2: Window,
                                arg3: *mut XWindowAttributes) -> c_int;
    pub fn XGrabButton(arg1: *mut Display, arg2: c_uint, arg3: c_uint,
                       arg4: Window, arg5: c_int, arg6: c_uint, arg7: c_int,
                       arg8: c_int, arg9: Window, arg10: Cursor) -> c_int;
    pub fn XGrabKey(arg1: *mut Display, arg2: c_int, arg3: c_uint,
                    arg4: Window, arg5: c_int, arg6: c_int, arg7: c_int) ->
     c_int;
    pub fn XGrabKeyboard(arg1: *mut Display, arg2: Window, arg3: c_int,
                         arg4: c_int, arg5: c_int, arg6: Time) -> c_int;
    pub fn XGrabPointer(arg1: *mut Display, arg2: Window, arg3: c_int,
                        arg4: c_uint, arg5: c_int, arg6: c_int, arg7: Window,
                        arg8: Cursor, arg9: Time) -> c_int;
    pub fn XGrabServer(arg1: *mut Display) -> c_int;
    pub fn XHeightMMOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XHeightOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XIfEvent(arg1: *mut Display, arg2: *mut XEvent,
                    arg3:
                        extern "C" fn
                            (arg1: *mut Display, arg2: *mut XEvent,
                             arg3: XPointer) -> c_int, arg4: XPointer) ->
     c_int;
    pub fn XImageByteOrder(arg1: *mut Display) -> c_int;
    pub fn XInstallColormap(arg1: *mut Display, arg2: Colormap) -> c_int;
    pub fn XKeysymToKeycode(arg1: *mut Display, arg2: KeySym) -> KeyCode;
    pub fn XKillClient(arg1: *mut Display, arg2: XID) -> c_int;
    pub fn XLookupColor(arg1: *mut Display, arg2: Colormap, arg3: *c_schar,
                        arg4: *mut XColor, arg5: *mut XColor) -> c_int;
    pub fn XLowerWindow(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XMapRaised(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XMapSubwindows(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XMapWindow(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XMaskEvent(arg1: *mut Display, arg2: c_long, arg3: *mut XEvent) ->
     c_int;
    pub fn XMaxCmapsOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XMinCmapsOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XMoveResizeWindow(arg1: *mut Display, arg2: Window, arg3: c_int,
                             arg4: c_int, arg5: c_uint, arg6: c_uint) ->
     c_int;
    pub fn XMoveWindow(arg1: *mut Display, arg2: Window, arg3: c_int,
                       arg4: c_int) -> c_int;
    pub fn XNextEvent(arg1: *mut Display, arg2: *mut XEvent) -> c_int;
    pub fn XNoOp(arg1: *mut Display) -> c_int;
    pub fn XParseColor(arg1: *mut Display, arg2: Colormap, arg3: *c_schar,
                       arg4: *mut XColor) -> c_int;
    pub fn XParseGeometry(arg1: *c_schar, arg2: *mut c_int, arg3: *mut c_int,
                          arg4: *mut c_uint, arg5: *mut c_uint) -> c_int;
    pub fn XPeekEvent(arg1: *mut Display, arg2: *mut XEvent) -> c_int;
    pub fn XPeekIfEvent(arg1: *mut Display, arg2: *mut XEvent,
                        arg3:
                            extern "C" fn
                                (arg1: *mut Display, arg2: *mut XEvent,
                                 arg3: XPointer) -> c_int, arg4: XPointer) ->
     c_int;
    pub fn XPending(arg1: *mut Display) -> c_int;
    pub fn XPlanesOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XProtocolRevision(arg1: *mut Display) -> c_int;
    pub fn XProtocolVersion(arg1: *mut Display) -> c_int;
    pub fn XPutBackEvent(arg1: *mut Display, arg2: *mut XEvent) -> c_int;
    pub fn XPutImage(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: *mut XImage, arg5: c_int, arg6: c_int, arg7: c_int,
                     arg8: c_int, arg9: c_uint, arg10: c_uint) -> c_int;
    pub fn XQLength(arg1: *mut Display) -> c_int;
    pub fn XQueryBestCursor(arg1: *mut Display, arg2: Drawable, arg3: c_uint,
                            arg4: c_uint, arg5: *mut c_uint,
                            arg6: *mut c_uint) -> c_int;
    pub fn XQueryBestSize(arg1: *mut Display, arg2: c_int, arg3: Drawable,
                          arg4: c_uint, arg5: c_uint, arg6: *mut c_uint,
                          arg7: *mut c_uint) -> c_int;
    pub fn XQueryBestStipple(arg1: *mut Display, arg2: Drawable, arg3: c_uint,
                             arg4: c_uint, arg5: *mut c_uint,
                             arg6: *mut c_uint) -> c_int;
    pub fn XQueryBestTile(arg1: *mut Display, arg2: Drawable, arg3: c_uint,
                          arg4: c_uint, arg5: *mut c_uint, arg6: *mut c_uint)
     -> c_int;
    pub fn XQueryColor(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor)
     -> c_int;
    pub fn XQueryColors(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor,
                        arg4: c_int) -> c_int;
    pub fn XQueryExtension(arg1: *mut Display, arg2: *c_schar,
                           arg3: *mut c_int, arg4: *mut c_int,
                           arg5: *mut c_int) -> c_int;
    pub fn XQueryKeymap(arg1: *mut Display, arg2: [c_schar, ..32u]) -> c_int;
    pub fn XQueryPointer(arg1: *mut Display, arg2: Window, arg3: *mut Window,
                         arg4: *mut Window, arg5: *mut c_int,
                         arg6: *mut c_int, arg7: *mut c_int, arg8: *mut c_int,
                         arg9: *mut c_uint) -> c_int;
    pub fn XQueryTextExtents(arg1: *mut Display, arg2: XID, arg3: *c_schar,
                             arg4: c_int, arg5: *mut c_int, arg6: *mut c_int,
                             arg7: *mut c_int, arg8: *mut XCharStruct) ->
     c_int;
    pub fn XQueryTextExtents16(arg1: *mut Display, arg2: XID, arg3: *XChar2b,
                               arg4: c_int, arg5: *mut c_int,
                               arg6: *mut c_int, arg7: *mut c_int,
                               arg8: *mut XCharStruct) -> c_int;
    pub fn XQueryTree(arg1: *mut Display, arg2: Window, arg3: *mut Window,
                      arg4: *mut Window, arg5: *mut *mut Window,
                      arg6: *mut c_uint) -> c_int;
    pub fn XRaiseWindow(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XReadBitmapFile(arg1: *mut Display, arg2: Drawable, arg3: *c_schar,
                           arg4: *mut c_uint, arg5: *mut c_uint,
                           arg6: *mut Pixmap, arg7: *mut c_int,
                           arg8: *mut c_int) -> c_int;
    pub fn XReadBitmapFileData(arg1: *c_schar, arg2: *mut c_uint,
                               arg3: *mut c_uint, arg4: *mut *mut c_uchar,
                               arg5: *mut c_int, arg6: *mut c_int) -> c_int;
    pub fn XRebindKeysym(arg1: *mut Display, arg2: KeySym, arg3: *mut KeySym,
                         arg4: c_int, arg5: *c_uchar, arg6: c_int) -> c_int;
    pub fn XRecolorCursor(arg1: *mut Display, arg2: Cursor, arg3: *mut XColor,
                          arg4: *mut XColor) -> c_int;
    pub fn XRefreshKeyboardMapping(arg1: *mut XMappingEvent) -> c_int;
    pub fn XRemoveFromSaveSet(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XRemoveHost(arg1: *mut Display, arg2: *mut XHostAddress) -> c_int;
    pub fn XRemoveHosts(arg1: *mut Display, arg2: *mut XHostAddress,
                        arg3: c_int) -> c_int;
    pub fn XReparentWindow(arg1: *mut Display, arg2: Window, arg3: Window,
                           arg4: c_int, arg5: c_int) -> c_int;
    pub fn XResetScreenSaver(arg1: *mut Display) -> c_int;
    pub fn XResizeWindow(arg1: *mut Display, arg2: Window, arg3: c_uint,
                         arg4: c_uint) -> c_int;
    pub fn XRestackWindows(arg1: *mut Display, arg2: *mut Window, arg3: c_int)
     -> c_int;
    pub fn XRotateBuffers(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XRotateWindowProperties(arg1: *mut Display, arg2: Window,
                                   arg3: *mut Atom, arg4: c_int, arg5: c_int)
     -> c_int;
    pub fn XScreenCount(arg1: *mut Display) -> c_int;
    pub fn XSelectInput(arg1: *mut Display, arg2: Window, arg3: c_long) ->
     c_int;
    pub fn XSendEvent(arg1: *mut Display, arg2: Window, arg3: c_int,
                      arg4: c_long, arg5: *mut XEvent) -> c_int;
    pub fn XSetAccessControl(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XSetArcMode(arg1: *mut Display, arg2: GC, arg3: c_int) -> c_int;
    pub fn XSetBackground(arg1: *mut Display, arg2: GC, arg3: c_ulong) ->
     c_int;
    pub fn XSetClipMask(arg1: *mut Display, arg2: GC, arg3: Pixmap) -> c_int;
    pub fn XSetClipOrigin(arg1: *mut Display, arg2: GC, arg3: c_int,
                          arg4: c_int) -> c_int;
    pub fn XSetClipRectangles(arg1: *mut Display, arg2: GC, arg3: c_int,
                              arg4: c_int, arg5: *mut XRectangle, arg6: c_int,
                              arg7: c_int) -> c_int;
    pub fn XSetCloseDownMode(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XSetCommand(arg1: *mut Display, arg2: Window,
                       arg3: *mut *mut c_schar, arg4: c_int) -> c_int;
    pub fn XSetDashes(arg1: *mut Display, arg2: GC, arg3: c_int,
                      arg4: *c_schar, arg5: c_int) -> c_int;
    pub fn XSetFillRule(arg1: *mut Display, arg2: GC, arg3: c_int) -> c_int;
    pub fn XSetFillStyle(arg1: *mut Display, arg2: GC, arg3: c_int) -> c_int;
    pub fn XSetFont(arg1: *mut Display, arg2: GC, arg3: Font) -> c_int;
    pub fn XSetFontPath(arg1: *mut Display, arg2: *mut *mut c_schar,
                        arg3: c_int) -> c_int;
    pub fn XSetForeground(arg1: *mut Display, arg2: GC, arg3: c_ulong) ->
     c_int;
    pub fn XSetFunction(arg1: *mut Display, arg2: GC, arg3: c_int) -> c_int;
    pub fn XSetGraphicsExposures(arg1: *mut Display, arg2: GC, arg3: c_int) ->
     c_int;
    pub fn XSetIconName(arg1: *mut Display, arg2: Window, arg3: *c_schar) ->
     c_int;
    pub fn XSetInputFocus(arg1: *mut Display, arg2: Window, arg3: c_int,
                          arg4: Time) -> c_int;
    pub fn XSetLineAttributes(arg1: *mut Display, arg2: GC, arg3: c_uint,
                              arg4: c_int, arg5: c_int, arg6: c_int) -> c_int;
    pub fn XSetModifierMapping(arg1: *mut Display, arg2: *mut XModifierKeymap)
     -> c_int;
    pub fn XSetPlaneMask(arg1: *mut Display, arg2: GC, arg3: c_ulong) ->
     c_int;
    pub fn XSetPointerMapping(arg1: *mut Display, arg2: *c_uchar, arg3: c_int)
     -> c_int;
    pub fn XSetScreenSaver(arg1: *mut Display, arg2: c_int, arg3: c_int,
                           arg4: c_int, arg5: c_int) -> c_int;
    pub fn XSetSelectionOwner(arg1: *mut Display, arg2: Atom, arg3: Window,
                              arg4: Time) -> c_int;
    pub fn XSetState(arg1: *mut Display, arg2: GC, arg3: c_ulong,
                     arg4: c_ulong, arg5: c_int, arg6: c_ulong) -> c_int;
    pub fn XSetStipple(arg1: *mut Display, arg2: GC, arg3: Pixmap) -> c_int;
    pub fn XSetSubwindowMode(arg1: *mut Display, arg2: GC, arg3: c_int) ->
     c_int;
    pub fn XSetTSOrigin(arg1: *mut Display, arg2: GC, arg3: c_int,
                        arg4: c_int) -> c_int;
    pub fn XSetTile(arg1: *mut Display, arg2: GC, arg3: Pixmap) -> c_int;
    pub fn XSetWindowBackground(arg1: *mut Display, arg2: Window,
                                arg3: c_ulong) -> c_int;
    pub fn XSetWindowBackgroundPixmap(arg1: *mut Display, arg2: Window,
                                      arg3: Pixmap) -> c_int;
    pub fn XSetWindowBorder(arg1: *mut Display, arg2: Window, arg3: c_ulong)
     -> c_int;
    pub fn XSetWindowBorderPixmap(arg1: *mut Display, arg2: Window,
                                  arg3: Pixmap) -> c_int;
    pub fn XSetWindowBorderWidth(arg1: *mut Display, arg2: Window,
                                 arg3: c_uint) -> c_int;
    pub fn XSetWindowColormap(arg1: *mut Display, arg2: Window,
                              arg3: Colormap) -> c_int;
    pub fn XStoreBuffer(arg1: *mut Display, arg2: *c_schar, arg3: c_int,
                        arg4: c_int) -> c_int;
    pub fn XStoreBytes(arg1: *mut Display, arg2: *c_schar, arg3: c_int) ->
     c_int;
    pub fn XStoreColor(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor)
     -> c_int;
    pub fn XStoreColors(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor,
                        arg4: c_int) -> c_int;
    pub fn XStoreName(arg1: *mut Display, arg2: Window, arg3: *c_schar) ->
     c_int;
    pub fn XStoreNamedColor(arg1: *mut Display, arg2: Colormap,
                            arg3: *c_schar, arg4: c_ulong, arg5: c_int) ->
     c_int;
    pub fn XSync(arg1: *mut Display, arg2: c_int) -> c_int;
    pub fn XTextExtents(arg1: *mut XFontStruct, arg2: *c_schar, arg3: c_int,
                        arg4: *mut c_int, arg5: *mut c_int, arg6: *mut c_int,
                        arg7: *mut XCharStruct) -> c_int;
    pub fn XTextExtents16(arg1: *mut XFontStruct, arg2: *XChar2b, arg3: c_int,
                          arg4: *mut c_int, arg5: *mut c_int,
                          arg6: *mut c_int, arg7: *mut XCharStruct) -> c_int;
    pub fn XTextWidth(arg1: *mut XFontStruct, arg2: *c_schar, arg3: c_int) ->
     c_int;
    pub fn XTextWidth16(arg1: *mut XFontStruct, arg2: *XChar2b, arg3: c_int)
     -> c_int;
    pub fn XTranslateCoordinates(arg1: *mut Display, arg2: Window,
                                 arg3: Window, arg4: c_int, arg5: c_int,
                                 arg6: *mut c_int, arg7: *mut c_int,
                                 arg8: *mut Window) -> c_int;
    pub fn XUndefineCursor(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XUngrabButton(arg1: *mut Display, arg2: c_uint, arg3: c_uint,
                         arg4: Window) -> c_int;
    pub fn XUngrabKey(arg1: *mut Display, arg2: c_int, arg3: c_uint,
                      arg4: Window) -> c_int;
    pub fn XUngrabKeyboard(arg1: *mut Display, arg2: Time) -> c_int;
    pub fn XUngrabPointer(arg1: *mut Display, arg2: Time) -> c_int;
    pub fn XUngrabServer(arg1: *mut Display) -> c_int;
    pub fn XUninstallColormap(arg1: *mut Display, arg2: Colormap) -> c_int;
    pub fn XUnloadFont(arg1: *mut Display, arg2: Font) -> c_int;
    pub fn XUnmapSubwindows(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XUnmapWindow(arg1: *mut Display, arg2: Window) -> c_int;
    pub fn XVendorRelease(arg1: *mut Display) -> c_int;
    pub fn XWarpPointer(arg1: *mut Display, arg2: Window, arg3: Window,
                        arg4: c_int, arg5: c_int, arg6: c_uint, arg7: c_uint,
                        arg8: c_int, arg9: c_int) -> c_int;
    pub fn XWidthMMOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XWidthOfScreen(arg1: *mut Screen) -> c_int;
    pub fn XWindowEvent(arg1: *mut Display, arg2: Window, arg3: c_long,
                        arg4: *mut XEvent) -> c_int;
    pub fn XWriteBitmapFile(arg1: *mut Display, arg2: *c_schar, arg3: Pixmap,
                            arg4: c_uint, arg5: c_uint, arg6: c_int,
                            arg7: c_int) -> c_int;
    pub fn XSupportsLocale() -> c_int;
    pub fn XSetLocaleModifiers(arg1: *c_schar) -> *mut c_schar;
    pub fn XOpenOM(arg1: *mut Display, arg2: *mut Struct__XrmHashBucketRec,
                   arg3: *c_schar, arg4: *c_schar) -> XOM;
    pub fn XCloseOM(arg1: XOM) -> c_int;
    pub fn XSetOMValues(arg1: XOM, ...) -> *mut c_schar;
    pub fn XGetOMValues(arg1: XOM, ...) -> *mut c_schar;
    pub fn XDisplayOfOM(arg1: XOM) -> *mut Display;
    pub fn XLocaleOfOM(arg1: XOM) -> *mut c_schar;
    pub fn XCreateOC(arg1: XOM, ...) -> XOC;
    pub fn XDestroyOC(arg1: XOC);
    pub fn XOMOfOC(arg1: XOC) -> XOM;
    pub fn XSetOCValues(arg1: XOC, ...) -> *mut c_schar;
    pub fn XGetOCValues(arg1: XOC, ...) -> *mut c_schar;
    pub fn XCreateFontSet(arg1: *mut Display, arg2: *c_schar,
                          arg3: *mut *mut *mut c_schar, arg4: *mut c_int,
                          arg5: *mut *mut c_schar) -> XFontSet;
    pub fn XFreeFontSet(arg1: *mut Display, arg2: XFontSet);
    pub fn XFontsOfFontSet(arg1: XFontSet, arg2: *mut *mut *mut XFontStruct,
                           arg3: *mut *mut *mut c_schar) -> c_int;
    pub fn XBaseFontNameListOfFontSet(arg1: XFontSet) -> *mut c_schar;
    pub fn XLocaleOfFontSet(arg1: XFontSet) -> *mut c_schar;
    pub fn XContextDependentDrawing(arg1: XFontSet) -> c_int;
    pub fn XDirectionalDependentDrawing(arg1: XFontSet) -> c_int;
    pub fn XContextualDrawing(arg1: XFontSet) -> c_int;
    pub fn XExtentsOfFontSet(arg1: XFontSet) -> *mut XFontSetExtents;
    pub fn XmbTextEscapement(arg1: XFontSet, arg2: *c_schar, arg3: c_int) ->
     c_int;
    pub fn XwcTextEscapement(arg1: XFontSet, arg2: *wchar_t, arg3: c_int) ->
     c_int;
    pub fn Xutf8TextEscapement(arg1: XFontSet, arg2: *c_schar, arg3: c_int) ->
     c_int;
    pub fn XmbTextExtents(arg1: XFontSet, arg2: *c_schar, arg3: c_int,
                          arg4: *mut XRectangle, arg5: *mut XRectangle) ->
     c_int;
    pub fn XwcTextExtents(arg1: XFontSet, arg2: *wchar_t, arg3: c_int,
                          arg4: *mut XRectangle, arg5: *mut XRectangle) ->
     c_int;
    pub fn Xutf8TextExtents(arg1: XFontSet, arg2: *c_schar, arg3: c_int,
                            arg4: *mut XRectangle, arg5: *mut XRectangle) ->
     c_int;
    pub fn XmbTextPerCharExtents(arg1: XFontSet, arg2: *c_schar, arg3: c_int,
                                 arg4: *mut XRectangle, arg5: *mut XRectangle,
                                 arg6: c_int, arg7: *mut c_int,
                                 arg8: *mut XRectangle, arg9: *mut XRectangle)
     -> c_int;
    pub fn XwcTextPerCharExtents(arg1: XFontSet, arg2: *wchar_t, arg3: c_int,
                                 arg4: *mut XRectangle, arg5: *mut XRectangle,
                                 arg6: c_int, arg7: *mut c_int,
                                 arg8: *mut XRectangle, arg9: *mut XRectangle)
     -> c_int;
    pub fn Xutf8TextPerCharExtents(arg1: XFontSet, arg2: *c_schar,
                                   arg3: c_int, arg4: *mut XRectangle,
                                   arg5: *mut XRectangle, arg6: c_int,
                                   arg7: *mut c_int, arg8: *mut XRectangle,
                                   arg9: *mut XRectangle) -> c_int;
    pub fn XmbDrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: c_int, arg5: c_int, arg6: *mut XmbTextItem,
                       arg7: c_int);
    pub fn XwcDrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: c_int, arg5: c_int, arg6: *mut XwcTextItem,
                       arg7: c_int);
    pub fn Xutf8DrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                         arg4: c_int, arg5: c_int, arg6: *mut XmbTextItem,
                         arg7: c_int);
    pub fn XmbDrawString(arg1: *mut Display, arg2: Drawable, arg3: XFontSet,
                         arg4: GC, arg5: c_int, arg6: c_int, arg7: *c_schar,
                         arg8: c_int);
    pub fn XwcDrawString(arg1: *mut Display, arg2: Drawable, arg3: XFontSet,
                         arg4: GC, arg5: c_int, arg6: c_int, arg7: *wchar_t,
                         arg8: c_int);
    pub fn Xutf8DrawString(arg1: *mut Display, arg2: Drawable, arg3: XFontSet,
                           arg4: GC, arg5: c_int, arg6: c_int, arg7: *c_schar,
                           arg8: c_int);
    pub fn XmbDrawImageString(arg1: *mut Display, arg2: Drawable,
                              arg3: XFontSet, arg4: GC, arg5: c_int,
                              arg6: c_int, arg7: *c_schar, arg8: c_int);
    pub fn XwcDrawImageString(arg1: *mut Display, arg2: Drawable,
                              arg3: XFontSet, arg4: GC, arg5: c_int,
                              arg6: c_int, arg7: *wchar_t, arg8: c_int);
    pub fn Xutf8DrawImageString(arg1: *mut Display, arg2: Drawable,
                                arg3: XFontSet, arg4: GC, arg5: c_int,
                                arg6: c_int, arg7: *c_schar, arg8: c_int);
    pub fn XOpenIM(arg1: *mut Display, arg2: *mut Struct__XrmHashBucketRec,
                   arg3: *mut c_schar, arg4: *mut c_schar) -> XIM;
    pub fn XCloseIM(arg1: XIM) -> c_int;
    pub fn XGetIMValues(arg1: XIM, ...) -> *mut c_schar;
    pub fn XSetIMValues(arg1: XIM, ...) -> *mut c_schar;
    pub fn XDisplayOfIM(arg1: XIM) -> *mut Display;
    pub fn XLocaleOfIM(arg1: XIM) -> *mut c_schar;
    pub fn XCreateIC(arg1: XIM, ...) -> XIC;
    pub fn XDestroyIC(arg1: XIC);
    pub fn XSetICFocus(arg1: XIC);
    pub fn XUnsetICFocus(arg1: XIC);
    pub fn XwcResetIC(arg1: XIC) -> *mut wchar_t;
    pub fn XmbResetIC(arg1: XIC) -> *mut c_schar;
    pub fn Xutf8ResetIC(arg1: XIC) -> *mut c_schar;
    pub fn XSetICValues(arg1: XIC, ...) -> *mut c_schar;
    pub fn XGetICValues(arg1: XIC, ...) -> *mut c_schar;
    pub fn XIMOfIC(arg1: XIC) -> XIM;
    pub fn XFilterEvent(arg1: *mut XEvent, arg2: Window) -> c_int;
    pub fn XmbLookupString(arg1: XIC, arg2: *mut XKeyPressedEvent,
                           arg3: *mut c_schar, arg4: c_int, arg5: *mut KeySym,
                           arg6: *mut c_int) -> c_int;
    pub fn XwcLookupString(arg1: XIC, arg2: *mut XKeyPressedEvent,
                           arg3: *mut wchar_t, arg4: c_int, arg5: *mut KeySym,
                           arg6: *mut c_int) -> c_int;
    pub fn Xutf8LookupString(arg1: XIC, arg2: *mut XKeyPressedEvent,
                             arg3: *mut c_schar, arg4: c_int,
                             arg5: *mut KeySym, arg6: *mut c_int) -> c_int;
    pub fn XVaCreateNestedList(arg1: c_int, ...) -> XVaNestedList;
    pub fn XRegisterIMInstantiateCallback(arg1: *mut Display,
                                          arg2: *mut Struct__XrmHashBucketRec,
                                          arg3: *mut c_schar,
                                          arg4: *mut c_schar, arg5: XIDProc,
                                          arg6: XPointer) -> c_int;
    pub fn XUnregisterIMInstantiateCallback(arg1: *mut Display,
                                            arg2:
                                                *mut Struct__XrmHashBucketRec,
                                            arg3: *mut c_schar,
                                            arg4: *mut c_schar, arg5: XIDProc,
                                            arg6: XPointer) -> c_int;
    pub fn XInternalConnectionNumbers(arg1: *mut Display,
                                      arg2: *mut *mut c_int, arg3: *mut c_int)
     -> c_int;
    pub fn XProcessInternalConnection(arg1: *mut Display, arg2: c_int);
    pub fn XAddConnectionWatch(arg1: *mut Display, arg2: XConnectionWatchProc,
                               arg3: XPointer) -> c_int;
    pub fn XRemoveConnectionWatch(arg1: *mut Display,
                                  arg2: XConnectionWatchProc, arg3: XPointer);
    pub fn XSetAuthorization(arg1: *mut c_schar, arg2: c_int,
                             arg3: *mut c_schar, arg4: c_int);
    pub fn _Xmbtowc(arg1: *mut wchar_t, arg2: *mut c_schar, arg3: c_int) ->
     c_int;
    pub fn _Xwctomb(arg1: *mut c_schar, arg2: wchar_t) -> c_int;
    pub fn XGetEventData(arg1: *mut Display, arg2: *mut XGenericEventCookie)
     -> c_int;
    pub fn XFreeEventData(arg1: *mut Display, arg2: *mut XGenericEventCookie);
}
